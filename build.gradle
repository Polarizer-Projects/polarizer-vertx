plugins {
    id "java"
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id "maven"
    id "maven-publish"
    id "signing"
    id "com.jfrog.bintray" version "1.7.3"
    id "com.jfrog.artifactory" version "4.6.2"
}

group 'com.github.redhatqe.polarizer'
version '0.1.0-SNAPSHOT'
def mainClassName = "io.vertx.core.Launcher"

sourceCompatibility = 1.8

String vertxVersion = '3.5.0'
String mainVerticleName = 'com.github.redhatqe.polarizer.MainVerticle'
String watchForChange = 'src/**/*'
String doOnChange = '/.gradlew classes'
String projectURL = 'https://github.com/Polarizer-Projects/polarizer-vertx.git'
String devURL = 'git@github.com:Polarizer-Projects/polarizer-vertx.git'
String propFile = System.getProperty("user.home") + "/.polarizer/polarizer-project.properties"

class Creds {
    public String user
    public String pw

    Creds(String u, String p) {
        this.user = u
        this.pw = p
    }
}

def getCreds(String polarizePropertyFile) {
    File f = new File(polarizePropertyFile)
    Properties props = new Properties()
    props.load(f.newDataInputStream())
    return new Creds(props.getProperty("ossrhUsername"), props.getProperty("ossrhPassword"))
}

def getCreds(String polarizePropertyFile, String field1, String field2) {
    File f = new File(polarizePropertyFile)
    Properties props = new Properties()
    props.load(f.newDataInputStream())
    return new Creds(props.getProperty(field1), props.getProperty(field2))
}

Creds credsOssrh = getCreds(propFile)
Creds credsBintray = getCreds(propFile, "bintrayUser", "bintrayPassword")


repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "io.vertx:vertx-web-client:${vertxVersion}"
    compile "io.vertx:vertx-core:${vertxVersion}"
    compile "io.vertx:vertx-web:${vertxVersion}"
    compile "io.vertx:vertx-amqp-bridge:${vertxVersion}"
    compile "io.vertx:vertx-rx-java2:${vertxVersion}"
    compile "io.vertx:vertx-unit:${vertxVersion}"
    compile "io.vertx:vertx-auth-oauth2:${vertxVersion}"
    compile 'io.reactivex.rxjava2:rxjava:2.1.6'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile 'com.github.redhatqe.polarizer:reporter:0.2.3-SNAPSHOT'
    compile 'com.github.redhatqe.polarizer:polarizer:0.2.2-SNAPSHOT'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes("Main-Verticle": "com.github.redhatqe.polarizer.verticles.MainVerticle",
                   "Main-Class": mainClassName)
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

/*
run {
    args = [ 'run'
           , mainVerticleName
           , "--redeploy=${watchForChange}"
           , "--launcher-class=${mainClassName}"
           , "--on-redeploy=${doOnChange}"
           ]
}
*/


// Had to add the -quiet option when creating the javadocs for Java 8, or creation will fail
// Generates javadocs
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.addStringOption('Xdoclint:none', '-quiet')
    classpath += sourceSets.test.compileClasspath
}

// Generates the javadoc jar
task javadocJar (type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generates the polarize jar
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

artifacts {
    archives jar, sourceJar, javadocJar, shadowJar
}

configurations {
    published
}

signing {
    sign configurations.archives
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id "stoner"
            name "Sean Toner"
            email "stoner@redhat.com"
        }
    }

    scm {
        connection "scm:git:${projectURL}.git"
        developerConnection "scm:git:${devURL}"
        url "${projectURL}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            artifact shadowJar
            groupId project.group
            artifactId project.name
            version "${version}"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'JAXB classes for xunit and testcases, TestNG reporter')
                root.appendNode('name', 'reporter')
                root.appendNode('url', "${projectURL}")
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = "polarizer-projects"
    key = credsBintray.pw
    override = true
    publish = true
    pkg {
        repo = project.name
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = projectURL
        version {
            name = "${version}"
            desc = 'Data definitions for xunit and testcase for polarize.  TestNG Reporter'
            released  = new Date()
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
            mavenCentralSync {
                sync = true //[Default: true] Determines whether to sync the version to Maven Central.
                user =  "${credsOssrh.user}" //OSS user token: mandatory
                password = "${credsOssrh.pw}" //OSS user password: mandatory
                close = '1' //Optional property. 1 = the staging repository is closed and artifacts are released .
            }
        }
    }
    publications = ['mavenJava']
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    // This information is used to upload to artifactory for snapshots
    publish {
        repository {
            repoKey = version.endsWith("SNAPSHOT") ? 'oss-snapshot-local' : 'oss-release-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }

        defaults {
            //List of Gradle Configurations (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
            publications('mavenJava')

            //properties = ['qa.level': 'basic', 'q.os': 'win32, deb, osx']  //Optional map of properties to attach to all published artifacts
            /*
            The properties closure in the "defaults" task uses the following syntax:
            properties {
                publicationName 'group:module:version:classifier@type', key1:'value1', key2:'value2', ...
            }*/

            publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
            publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
            publishPom = true   //Publish generated POM files to Artifactory (true by default).
            publishIvy = true   //Publish generated Ivy descriptor files to Artifactory (true by default).
        }
    }

    resolve {
        repository {
            repoKey = version.endsWith("SNAPSHOT") ? "libs-snapshot" : "libs-release"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}